<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>The simplest way to build, share and collaborate on microservices</description>
    <link>https://micro.mu//blog/</link>
    <atom:link href="https://micro.mu//blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 04 Oct 2019 19:10:12 +0100</pubDate>
    <lastBuildDate>Fri, 04 Oct 2019 19:10:12 +0100</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Deprecating Consul in favour of Etcd</title>
        <description>&lt;p&gt;&lt;br /&gt;
For over 4 years Consul has served us well as one of the default service discovery systems in Micro. It was 
in fact in the very beginning the default mechanism used for the registry and the only underlying 
dependency required to get started.&lt;/p&gt;

&lt;p&gt;Since then the world has moved on and cloud-native technologies have evolved. We’ve found a number of issues 
at scale related to the way in which we use Consul. This is not a knock on Consul but a reflection on our 
use cases and the need to move on to something different.&lt;/p&gt;

&lt;p&gt;For example we binary encode, compress and base64 encode our metadata and service endpoint information 
before storing them as Consul tags because there just wasn’t any other way to do so. We were also very 
heavily abusing the distributed properties of Consul which caused a number of issues with raft consensus.&lt;/p&gt;

&lt;p&gt;Unfortunately we’ve found that its now time to move on.&lt;/p&gt;

&lt;p&gt;Since 2014 kubernetes has really become a reckoning force in the landscape of container orchestration and the 
base level platform for services. With that etcd became their key-value storage of choice, a distributed key-value 
store built with raft consensus. It has evolve to cater to the scale requirements of kubernetes and has since 
been battle tested in a way few other open source projects have.&lt;/p&gt;

&lt;p&gt;Etcd also being a very standard Get/Put/Delete store for binary data means we’re easily able to encode and store 
our service metadata with zero issues. It has no opinions about the format of the data being stored.&lt;/p&gt;

&lt;p&gt;We’ve in the past week moved etcd to become one of the default service discovery mechanisms in Micro and will be 
looking to deprecate Consul in the coming weeks. What does this mean? Well we’ll be moving consul to our 
community maintained &lt;a href=&quot;https://github.com/micro/go-plugins&quot;&gt;go-plugins&lt;/a&gt; repository and focusing on supporting 
etcd.&lt;/p&gt;

&lt;p&gt;We know a number of users are using Consul and this may cause disruption. This to us is a breaking change on our 
path to v2 and so our next release will be tagged as v2. You can be assured that your v1 releases will continue 
to operate as is but expect that the next release we do is micro v2.0.0.&lt;/p&gt;

&lt;center&gt;...&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
To learn more check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Micro&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Fri, 04 Oct 2019 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2019/10/04/deprecating-consul.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2019/10/04/deprecating-consul.html</guid>
        
        
      </item>
    
      <item>
        <title>The end game for developers</title>
        <description>&lt;p&gt;&lt;br /&gt;
Something I often wonder is how we’re stuck in this pre-historic phase of software development. Where technology has largely advanced from a consumer experience standpoint, but as developers it feels like we’re moving at a snails pace.&lt;/p&gt;

&lt;p&gt;The languages of today remain largely unchanged. The frameworks which appear continually offer the same experiences as those that came before them. And every so often we develop new technologies which create a “paradigm shift” which ultimately sets us back 10 years as we have to build the same tools again for new platforms.&lt;/p&gt;

&lt;p&gt;As a developer and former systems engineer, I’m tired. I’m tired of the same old same old. I’m tired of building the same things as I built before. I’m tired of constantly reinventing the wheel because we decided to use a different technology stack or because we want to learn docker, kubernetes, Go or whatever the next new hyped thing is.&lt;/p&gt;

&lt;p&gt;Ultimately I feel like software development is at a standstill. And the reason why we only have 24m developers in the world is because we’re not progressing. We’re not evolving. I believe this has to change.&lt;/p&gt;

&lt;p&gt;I think the end game for developers is really to turn every human being with a mobile device into a developer. This requires a fundamental change in how we design programming languages and tools. It’s a first principles approach no one dares take.&lt;/p&gt;

&lt;p&gt;What is the end game for developers? Let us know your thoughts.&lt;/p&gt;

&lt;center&gt;...&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
To learn more check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Micro&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Thu, 13 Jun 2019 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2019/06/13/the-developer-end-game.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2019/06/13/the-developer-end-game.html</guid>
        
        
      </item>
    
      <item>
        <title>Micro - The great consolidation of 2019</title>
        <description>&lt;p&gt;&lt;br /&gt;
Micro started it’s journey as &lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;&lt;strong&gt;go-micro&lt;/strong&gt;&lt;/a&gt; - a microservices framework - focused 
on providing the core requirements for microservice development. It creates a simpler experience for building microservices 
by abstracting away the complexity of distributed systems.&lt;/p&gt;

&lt;p&gt;Over time we’ve expanded beyond go-micro into additional tools, libraries and plugins. This has led to fragmentation 
in the way we solve problems and how developers are expected to use micro tools. We’re now undergoing a consolidation 
of all these tools to simplify the developer experience.&lt;/p&gt;

&lt;p&gt;Micro essentially moves to being a standalone development framework and runtime for microservices development.&lt;/p&gt;

&lt;p&gt;Before we talk about the consolidation, let’s revisit the journey thus far.&lt;/p&gt;

&lt;h2 id=&quot;the-primary-focus&quot;&gt;The Primary Focus&lt;/h2&gt;

&lt;p&gt;Go-micro started out as primarily being focused on the communication aspects of microservices and we’ve tried to remain true to that. 
This opinionated approach and focus is what’s really driven the success of the framework thus far. Over the years 
we’ve had numerous requests to solve the next day problems for building production ready software in go-micro itself. 
Much of this has been related to scalability, security, synchronisation and configuration.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://micro.mu/docs/images/go-micro.svg&quot; style=&quot;width: 80%; height: auto;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;While there would have been merit to add the additional features requested we really wanted to stay very focused 
on solving one problem really well at first. So we took a different approach to promoting the community to do this.&lt;/p&gt;

&lt;h2 id=&quot;ecosystem--plugins&quot;&gt;Ecosystem &amp;amp; Plugins&lt;/h2&gt;

&lt;p&gt;Going to production involves much more than vanilla service discovery, message encoding and request-response. 
We really understood this but wanted to enable users to choose the wider platform requirements via pluggable and 
extensible interfaces. Promoting an ecosystem through an &lt;a href=&quot;https://micro.mu/explore/&quot;&gt;explorer&lt;/a&gt; which aggregates 
micro based open source projects on GitHub along with extensible plugins via the &lt;a href=&quot;https://github.com/micro/go-plugins&quot;&gt;go-plugins&lt;/a&gt; repo.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://micro.mu/explorer.png&quot; style=&quot;width: 80%; height: auto;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Go Plugins has generally been a great success by allowing developers to offload significant complexity to systems built 
for those requirements e.g prometheus for metrics, zipkin for distributed tracing and kafka for durable messaging.&lt;/p&gt;

&lt;h2 id=&quot;points-of-interaction&quot;&gt;Points of Interaction&lt;/h2&gt;

&lt;p&gt;Go Micro was really at the heart of microservice development but as services were written the next questions moved on to; 
how do I query these, how do I interact with them, how do I serve them by traditional means…&lt;/p&gt;

&lt;p&gt;Given go-micro used an rpc/protobuf based protocol that was both pluggable and runtime agnostic, we needed some way to address 
this in a way that was true to go-micro itself. This led to the creation of &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;strong&gt;micro&lt;/strong&gt;&lt;/a&gt;, 
the microservice toolkit. Micro provides an api gateway, web dashboard, cli, slack bot, service proxy and much more.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://micro.mu/runtime3.svg&quot; style=&quot;width: 80%; height: auto;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;The micro toolkit acted as interaction points via http api, browser, slack commands and command line interface. These 
are common ways in which we query and build on applications and it was important for us to provide a runtime that 
really enabled this. Yet still it really focused on communication above all else.&lt;/p&gt;

&lt;h2 id=&quot;additional-tools&quot;&gt;Additional Tools&lt;/h2&gt;

&lt;p&gt;While the plugins and the toolkit helped users of micro significantly, it still lacked in key areas. It was clear that our community 
wanted us to solve further problems around platform tooling for product development rather than having to do it individually at 
their various companies. We needed the same types of abstractions go-micro provided for things like dynamic configuration, 
distributed synchronization and broader solutions for systems like Kubernetes.&lt;/p&gt;

&lt;p&gt;For these we created:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/micro/go-config&quot;&gt;micro/go-config&lt;/a&gt; - a dynamic configuration library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/asim/go-sync&quot;&gt;micro/go-sync&lt;/a&gt; - a distributed synchronisation library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/micro/kubernetes&quot;&gt;micro/kubernetes&lt;/a&gt; - micro on kubernetes initialisation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/micro/examples&quot;&gt;examples&lt;/a&gt; - example usage code for micro&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microhq&quot;&gt;microhq&lt;/a&gt; - a place for prebuilt microservices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were a few of the repos, libraries and tools used to attempt to solve the wider requirements of our community. Over the 
4 years the number of repos grew and the getting started experience for new users became much more difficult. The barrier to 
entry increased dramatically and with that we knew something needed to change.&lt;/p&gt;

&lt;h2 id=&quot;consolidation&quot;&gt;Consolidation&lt;/h2&gt;

&lt;p&gt;In the past few weeks we’ve realised &lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;&lt;strong&gt;go-micro&lt;/strong&gt;&lt;/a&gt; was really the focal point for most of our users 
developing microservices. It’s become clear they want additional functionality as part of this library and as a self described 
framework we really need to embrace this by solving those next day concerns without asking a developer to go anywhere else.&lt;/p&gt;

&lt;p&gt;Essentially &lt;strong&gt;go-micro&lt;/strong&gt; will be the all encompassing and standalone framework for microservice development.&lt;/p&gt;

&lt;p&gt;We’ve started the consolidation process by moving all our libraries into go-micro and we’ll continue to refactor over the 
coming weeks to provide a simpler default getting started experience while also adding further features for logging, tracing, metrics, 
authentication, etc.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/blog/assets/images/go-micro-repo.png&quot; style=&quot;width: 80%; height: auto;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;We’re not forgetting about &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;strong&gt;micro&lt;/strong&gt;&lt;/a&gt; either though. In our minds after you’ve built your microservices 
there’s still a need for a way to query, run and manage them. &lt;strong&gt;Micro&lt;/strong&gt; is by all accounts going to be the runtime for micro 
service development. We’re working on providing a simpler way to manage the end to end flow of microservice development and 
should have more to announce soon.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Micro is the simplest way to build microservices and slowly becoming the defacto standard for Go based microservice development in 
the cloud. We’re making that process even simpler by consolidating our efforts into a single development framework and runtime.&lt;/p&gt;

&lt;center&gt;...&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
To learn more check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Micro&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2019/06/10/the-great-consolidation.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2019/06/10/the-great-consolidation.html</guid>
        
        
      </item>
    
      <item>
        <title>Micro 1.0.0 release and beyond</title>
        <description>&lt;p&gt;&lt;br /&gt;
Over the past 4 years we’ve focused on creating the simplest experience for microservice development. To do this 
we built a strongly opinionated open source framework called &lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;&lt;strong&gt;Go Micro&lt;/strong&gt;&lt;/a&gt; and 
&lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;strong&gt;Micro&lt;/strong&gt;&lt;/a&gt;, a microservice toolkit built to explore, query and 
interact with those services via an API Gateway, CLI, Slack and Web Dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://micro.mu/docs/images/go-micro.svg&quot; style=&quot;max-width: 100%; margin: 0;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;version-100&quot;&gt;Version 1.0.0&lt;/h2&gt;

&lt;p&gt;Last month we released &lt;strong&gt;version 1.0.0&lt;/strong&gt; of both of these tools. This signifies a huge moment for Micro and the community. We’ve been 
running in production since 2015 and have become vital for companies like our sponsor Sixt, the german car rental enterprise, who are 
running hundreds of microservices in production.&lt;/p&gt;

&lt;p&gt;Micro enables teams to scale microservices development while abstracting away the complexity of distributed systems and cloud-native infrastructure. 
It provides a pluggable and runtime agnostic architecture with sane zero dependency defaults.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://micro.mu/micro-diag.svg&quot; style=&quot;max-width: 100%; margin: 0;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
We’ve considered Micro production ready for a long time but the release of 1.0.0 solidifies the maturity and stability of our tooling. And 
we believe it’s the right time for everyone to adopt Micro as the defacto standard for microservice development.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Micro has largely grown organically. We’ve not yet actively engaged in speaking at conferences, meetups or any other form of outreach. Instead 
we focused on solving a real problem and it’s shown in the numbers.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;/blog/assets/images/stars.png&quot; style=&quot;max-width: 75%; margin: 0;&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
It’s difficult to track active usage of a library or framework but what’s clear from all we can see is that Micro has really resonated with 
the developer community who want a simpler path to adopting microservices with Go.&lt;/p&gt;

&lt;h2 id=&quot;beyond-10&quot;&gt;Beyond 1.0&lt;/h2&gt;

&lt;p&gt;The announcement of version 1.0.0 is not just a marker for maturity and stability to run Micro in production but it also signals that this release version 
will not suffer any further breaking API changes. This now also allows us to take stock of all the learnings of Micro’s usage of the past 4 
years, how technology has evolved in the industry and what version 2 might start to look like.&lt;/p&gt;

&lt;p&gt;When we started, kubernetes was just in it’s infancy and gRPC had only recently been released. We’re seeing these trends along with service mesh 
and much more.&lt;/p&gt;

&lt;p&gt;Because Micro is pluggable we’ve always been able to adapt to the changing needs of developers while continuing to provide 
simpler abstractions on top for microservice development. With version 2.0 we have the ability to create an even more frictionless and streamlined
experience.&lt;/p&gt;

&lt;p&gt;Some of these ideas will revolve around using gRPC by default, allowing a drop-in experience on kubernetes and potentially a runtime 
for those who don’t want to deal with the complexity of cloud-native systems or any dependency management at all.&lt;/p&gt;

&lt;p&gt;We’ll also be thinking about how to move beyond Go to support multiple languages.&lt;/p&gt;

&lt;h2 id=&quot;collaboration&quot;&gt;Collaboration&lt;/h2&gt;

&lt;p&gt;Slack has served us well for realtime collaboration but we need a medium aligned with open source to push this much further, to be far more inclusive 
and to provide a historic record for newcomers to explore easily.&lt;/p&gt;

&lt;p&gt;We’re going to work with the community by using GitHub to create an open source location to share ideas, discussion and the roadmap for the 
&lt;a href=&quot;https://github.com/micro/development&quot;&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/a&gt; of features for 2.0 and beyond.&lt;/p&gt;

&lt;p&gt;To all those interested in contributing and collaboration, create an issue for feature requests, a pull request to share design ideas and we’ll work 
together to shape the roadmap.&lt;/p&gt;

&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;I want to finish by saying thank you to the Micro community and all who’ve used or supported us over the past 4 years. It’s been a long hard 
but incredibly rewarding journey with so much more left to do. Without the community Micro would not be where it is today. We’re 1.6k+ members 
strong in Slack with thousands more across other forums.&lt;/p&gt;

&lt;center&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Today I released v1 of micro and go-micro. 4 years of hard work. Thanks to all that supported me along the way. &lt;a href=&quot;https://t.co/blI1pJ3hBl&quot;&gt;https://t.co/blI1pJ3hBl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Asim Aslam (@chuhnk) &lt;a href=&quot;https://twitter.com/chuhnk/status/1102992210088378369?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
Thank you for all your support and contributions. We hope we can return the favour by providing everyone the most inclusive and collaborative 
place for all things microservices.&lt;/p&gt;

&lt;center&gt;...&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
Micro is the simplest way to build microservices. If you’re thinking about microservice development we want to help enable you on that journey. 
To learn more check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/micro&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Micro&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2019/04/01/micro-version-1-and-beyond.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2019/04/01/micro-version-1-and-beyond.html</guid>
        
        
      </item>
    
      <item>
        <title>Consul Connect-Native Go Micro Services</title>
        <description>&lt;p&gt;&lt;br /&gt;
Today we’re announcing support for Connect-Native Go Micro services via a slim initialisation library called &lt;a href=&quot;https://github.com/micro/go-proxy&quot;&gt;Go Proxy&lt;/a&gt;. 
This will provide &lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;Go Micro&lt;/a&gt; with the ability to do authorized and secure service-to-service communication.&lt;/p&gt;

&lt;h2 id=&quot;what-is-consul-connect&quot;&gt;What is Consul Connect?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.consul.io/docs/connect/index.html&quot;&gt;Consul Connect&lt;/a&gt; is a feature of &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt; which provides 
service-to-service authorization and encryption via mutual TLS. Consul Connect uses &lt;a href=&quot;https://spiffe.io/&quot;&gt;SPIFEE&lt;/a&gt; compliant 
certificates for identity.&lt;/p&gt;

&lt;p&gt;We believe Consul Connect is a powerful mechanism for securing micro services. So how do we integrate?&lt;/p&gt;

&lt;h2 id=&quot;connect-native&quot;&gt;Connect-Native&lt;/h2&gt;

&lt;p&gt;Consul &lt;a href=&quot;https://www.consul.io/docs/connect/native.html&quot;&gt;Connect-Native&lt;/a&gt; is native integration with the Connect API. This allows 
&lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;Go Micro&lt;/a&gt; services to become secure by default.&lt;/p&gt;

&lt;p&gt;Consul Connect provides the ability to use proxies for communication but this can add overhead, Go Micro handles distributed 
systems concerns as a client library, which eliminates this overhead. Native integration with Connect gives us all its benefits 
while maintaining direct point to point connections for performance.&lt;/p&gt;

&lt;p&gt;The consul documentation provides an overview of how this works. In Go Micro’s case we initialise a consul registry with the 
connect option enabled and setup the broker and transport tls config.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.consul.io/assets/images/connect-native-overview-cc9dc497.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-connect-native&quot;&gt;Using Connect-Native&lt;/h2&gt;

&lt;p&gt;We’ve provided a complete example of how to get started in the &lt;a href=&quot;https://github.com/micro/go-proxy&quot;&gt;Go Proxy&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;But essentially it’s a two line change. Import the connect package and create a new service with it. That’s it!&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/de7a3bcfcd93f6102e6c657ed54b8f2e.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Connect-Native gives us support for authorization and secure end to end communication for Go Micro apps without the overhead 
of proxies. It’s a great addition for micro users and we highly recommend using it.&lt;/p&gt;

&lt;center&gt;...&lt;/center&gt;

&lt;p&gt;To learn more about micro check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/go-proxy&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Go Proxy&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Thu, 29 Nov 2018 09:00:00 +0000</pubDate>
        <link>https://micro.mu//blog/2018/11/29/connect-native.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2018/11/29/connect-native.html</guid>
        
        
      </item>
    
      <item>
        <title>The Micro Newsletter</title>
        <description>&lt;p&gt;&lt;br /&gt;
Hey, we’re starting a newsletter! Micro provides an opinionated view on how to build cloud-native systems but we want to provide 
opinions beyond the micro ecosystem too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://micro.mu/#newsletter&quot;&gt;The micro newsletter&lt;/a&gt; is an opinionated summary of all things cloud-native. Every so often we’ll send out an email with a few 
links to the most interesting cloud-native related content. This may include news, articles, videos, etc.&lt;/p&gt;

&lt;p&gt;We’ll also share some of our opinions on each piece of content so you can through the noise and get some concise thoughts 
to help you understand what’s going on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/images/newsletter.png&quot; style=&quot;width: 100%; margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve already sent out two newsletters and the response has been very positive so far. While we started with the idea of a weekly newsletter, 
we’ll likely only send you content when there’s something interesting to talk about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://micro.mu/#newsletter&quot;&gt;Subscribe&lt;/a&gt; if you’re interested in hearing from us.&lt;/p&gt;

&lt;center&gt;&lt;p&gt;...&lt;/p&gt;&lt;/center&gt;

&lt;p&gt;If you want to learn more about micro, checkout the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt; or 
visit &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;Twitter&lt;/a&gt; or join the &lt;a href=&quot;http://slack.micro.mu&quot;&gt;Slack&lt;/a&gt; community.&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Jul 2018 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2018/07/07/the-micro-newsletter.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2018/07/07/the-micro-newsletter.html</guid>
        
        
      </item>
    
      <item>
        <title>Go Config - A pluggable config framework</title>
        <description>&lt;p&gt;&lt;br /&gt;
Application configuration has remained largely static for most of our lifetime, using flags, environment variables and files. 
Any change has usually required restarting the application or significant complexity in code to signal and reload the config.&lt;/p&gt;

&lt;p&gt;Today though, we need more. Restarting an application for a minor configuration seems like overkill. If only one property 
needs to change, should there not be a better way? Dynamic configuration provides us this option.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-config&quot;&gt;Dynamic Config&lt;/h3&gt;

&lt;p&gt;Dynamic configuration is the concept by which a system can be modified or extended while it’s running. Or in simpler terms 
the values you require for configuration are automatically updated as they change.&lt;/p&gt;

&lt;p&gt;There’s an emergence of tooling for dynamic config mostly driven by key-value stores as the source of truth. Yet when we then 
need to extract out these values it requires reading individual keys, extracting bytes and handling decoding manually.&lt;/p&gt;

&lt;p&gt;In an ideal world, the configuration system should handle all of these concerns leaving you to focus on what’s most important. 
Your code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/micro/go-config&quot;&gt;&lt;strong&gt;Go Config&lt;/strong&gt;&lt;/a&gt; is a pluggable config framework which looks to solve these problems.&lt;/p&gt;

&lt;h3 id=&quot;go-config&quot;&gt;Go Config&lt;/h3&gt;

&lt;p&gt;Go Config was born out of a need to simplify configuration for users of micro. Once companies had started building real 
products that were going to production they echoed the need for the ability to provide configuration for business logic 
related code or higher level config that shouldn’t really necessitate the need for a restart.&lt;/p&gt;

&lt;p&gt;In some cases they had opted for the kubernetes config map or a key-value store such as consul or etcd but handling 
this configuration in code was not pleasant. They were looking for abstractions similar to Go Micro for their config.&lt;/p&gt;

&lt;p&gt;And so Go Config was created to help with this and much more.&lt;/p&gt;

&lt;p&gt;Go Config is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt; - Config is updated transparently in the background&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pluggable&lt;/strong&gt; - Backend sources can be swapped out&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mergeable&lt;/strong&gt; - Multiple sources are merged into a single source of truth&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Observable&lt;/strong&gt; - Actively watch the config for changes if you need&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Safe&lt;/strong&gt; - Default fallback values can be specified in case they don’t exist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also has the benefit of supporting multiple backend sources and config encoding formats out of the box. See the project 
&lt;a href=&quot;https://github.com/micro/go-config&quot;&gt;readme&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Here’s the top level interface which encapsulates all the features mentioned.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/9365ffa1115d2215a39d9073a2fa0ffc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ok so let’s break it down and discuss the various concerns in the framework starting with the backend sources.&lt;/p&gt;

&lt;h3 id=&quot;source&quot;&gt;Source&lt;/h3&gt;

&lt;p&gt;A source is a backend from which config is loaded. This could be command line flags, environment variables, a key-value store 
or any other number of places.&lt;/p&gt;

&lt;p&gt;Go Config provides a simple abstraction over all these sources as a simple interface from which we read data or what we call a ChangeSet.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/45a0c1f0a40c29c034b1aea796a24c96.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The ChangeSet includes the raw data, it’s format, timestamp of creation or last update and the source from which it was loaded. 
There’s also an optional md5 checksum which can be recalculated using the &lt;code&gt;Sum()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The simplicity of this interface allows us to easily create a source for any backend, read it’s values at any given time or 
watch for changes where possible.&lt;/p&gt;

&lt;h3 id=&quot;encoding&quot;&gt;Encoding&lt;/h3&gt;

&lt;p&gt;Config is rarely available in just a single format and people usually have varying preferences on whether it should be stored 
in json, yaml, toml or something else. We make sure to deal with this in the framework so almost any encoding format can be 
dealt with.&lt;/p&gt;

&lt;p&gt;The encoder is a very simply interface for handling encoding and decoding different formats. Why wouldn’t we reuse existing libraries for 
this? We do beneath the covers but to ensure we could deal with encoding in an abstract way it made sense to define an interface for it.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/131349521cbb974c680cd3a245bf13c7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The current supported formats are json, yaml, toml, xml and hcl.&lt;/p&gt;

&lt;h3 id=&quot;reader&quot;&gt;Reader&lt;/h3&gt;

&lt;p&gt;Once we’ve loaded backend sources and developed a way to decode the variety of config formats we need some way of actually internally 
representing and reading it. For this we’ve created a reader.&lt;/p&gt;

&lt;p&gt;The reader manages decoding and merging multiple changesets into a single source of truth. It then provides a value interface which 
allows you to retrieve native Go types or scan the config into a type of your choosing.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/e19799834382975b85e1c1813c4e2f89.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Our default internal representation for the merged source is json.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let’s look at how Go Config actually works in code. Starting with a simple example, let’s read config from a file.&lt;/p&gt;

&lt;h4 id=&quot;read-config&quot;&gt;Read Config&lt;/h4&gt;

&lt;p&gt;Step 1. Define a config.json file&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/f6ddc55133f54f32fe0e9e6813e286dc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Step 2. Load the file into config&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/716a352d1f2d071fbf14a4fae39fc692.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Step 3. Read the values from config&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/d97fe7bd2d16b125c721808e693ba88b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And that’s it! It’s really that simple.&lt;/p&gt;

&lt;h4 id=&quot;watch-config&quot;&gt;Watch Config&lt;/h4&gt;

&lt;p&gt;If the config file changes, the next time you read the value it will be different. But what if you want to 
track that change? You can watch for changes. Let’s test it out.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/d7b98889aaf0342f99c0360641907bc0.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;In this example rather than getting a value, we watch it. The next time the value changes we’ll receive it and 
can update our Host struct.&lt;/p&gt;

&lt;h4 id=&quot;merge-config&quot;&gt;Merge Config&lt;/h4&gt;

&lt;p&gt;Another useful feature is the ability to load config from multiple sources which are ordered, merged and overridden.
A good example of this would be loading config from a file but overriding via environment variables or flags.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/e91071c4eaff6e0a081ea43a9cdcf7da.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;fallback-values&quot;&gt;Fallback Values&lt;/h4&gt;

&lt;p&gt;In the event some values may not exist or config does not load due to an error, you can set fallback values at 
time of getting them.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/fbfef8fcfe16cb252377fae821c03a2e.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;The way in which config is managed and consumed needs to evolve. Go Config looks to do this by drastically simplifying 
use of dynamic configuration with a pluggable framework.&lt;/p&gt;

&lt;p&gt;Go Config currently supports a number of configuration formats and backend sources but we’re always looking for 
more contributions. If you’re interested in contribution please feel free to do so by with a pull request.&lt;/p&gt;

&lt;p&gt;Let Go Config managed the complexity of configuration for you so you can focus on what’s really important. Your code.&lt;/p&gt;

&lt;p&gt;To learn more about micro check out the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;twitter&lt;/a&gt; or 
join the &lt;a href=&quot;https://micro-services.slack.com&quot;&gt;slack&lt;/a&gt; community.&lt;/p&gt;

&lt;h6&gt;&lt;a href=&quot;https://github.com/micro/go-config&quot;&gt;&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; Go Config&lt;/a&gt;&lt;/h6&gt;
</description>
        <pubDate>Wed, 04 Jul 2018 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2018/07/04/go-config.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2018/07/04/go-config.html</guid>
        
        
      </item>
    
      <item>
        <title>Micro on Patreon</title>
        <description>&lt;p&gt;&lt;br /&gt;
The open source development of micro can now be sponsored via &lt;a href=&quot;https://www.patreon.com/microhq&quot;&gt;Patreon&lt;/a&gt;. Before we 
go into the details, I want to first mention what micro is and it’s funding journey.&lt;/p&gt;

&lt;p&gt;Micro is an open source project with the mission of simplifying cloud-native development. Technology is rapidly evolving. 
Cloud computing gives us unlimited scale but leveraging that scale with existing tools is still difficult.&lt;/p&gt;

&lt;p&gt;Micro is solving this problem with a developer first focus. The project provides an opinionated set of tools that abstract 
away the complexities and details of infrastructure so you can focus on what’s really important.&lt;/p&gt;

&lt;h2 id=&quot;in-the-beginning&quot;&gt;In The Beginning&lt;/h2&gt;

&lt;p&gt;The project was created just over 3 years ago. At the end of 2014, after spending time building distributed systems 
tools at Google and Hailo, it was clear there was immense value in their tools but they would never be open sourced.&lt;/p&gt;

&lt;p&gt;As with most companies 
these technology stacks were built for the organisation themselves and contained org specific references or assumptions about the 
infrastructure deeply embedded within the code.&lt;/p&gt;

&lt;p&gt;To open source that code would have been a measurable effort. As we’ve now seen, Google and the like have chosen to 
implement new projects from the ground up with the intention of being open source first.&lt;/p&gt;

&lt;p&gt;Back in 2014 though, this had yet to happen and I saw the need for a runtime agnostic set of tools focused on abstracting 
away the details of distributed systems with an opinionated interface for developers.&lt;/p&gt;

&lt;p&gt;This is what led to the creation of micro.&lt;/p&gt;

&lt;h2 id=&quot;venture-funding&quot;&gt;Venture Funding&lt;/h2&gt;

&lt;p&gt;In early 2015 I knew I wanted to pursue micro full time and being at a VC backed company led me to believe the best way 
to do that would be to try raise money from venture capitalists.&lt;/p&gt;

&lt;p&gt;I spent a number of months pursuing this effort with little to show for it. The combination of my lack of experience, traction 
and location made it difficult to convince investors this was a venture worth pursuing.&lt;/p&gt;

&lt;p&gt;VC funding was not in the cards for micro.&lt;/p&gt;

&lt;h2 id=&quot;self-funding&quot;&gt;Self Funding&lt;/h2&gt;

&lt;p&gt;In mid 2015 micro was an open source project like many others on GitHub, with little traction and no production use. 
It wasn’t clear then if it would ever go beyond being just another OSS project on GitHub.&lt;/p&gt;

&lt;p&gt;At that point I decided going back to work was the right move. It was however short lived, as a couple months later 
developers started to show interest in using the project at work. This was enough to convince me I needed to focus my efforts 
on micro full time.&lt;/p&gt;

&lt;p&gt;From late 2015 onwards, I self funded micro’s open source journey, with the hope of finding a more sustainable approach later.&lt;/p&gt;

&lt;h2 id=&quot;enterprise-sponsorship&quot;&gt;Enterprise Sponsorship&lt;/h2&gt;

&lt;p&gt;A year into it’s life, micro attracted the attention of
&lt;a href=&quot;https://www.sixt.com/&quot;&gt;Sixt&lt;/a&gt;, the German car rental enterprise. Sixt undergoing a technical transformation 
understood how micro could be leveraged as a competitive advantage. This led to the first 
&lt;a href=&quot;/blog/2016/04/25/announcing-sixt-sponsorship.html&quot;&gt;Enterprise Sponsorship&lt;/a&gt; of micro 
and a potentially better path to funding it’s long term open source development.&lt;/p&gt;

&lt;p&gt;Since then micro has gone on to be used in production by dozens of companies all over the world. Most building very 
different products yet despite this, they all have one thing in common.&lt;/p&gt;

&lt;p&gt;Micro has become the core technology for building their platforms.&lt;/p&gt;

&lt;p&gt;It’s been 2 years since micro was sponsored by Sixt. Our hope was that other enterprises using micro would 
follow suit, enabling us to scale it’s development.&lt;/p&gt;

&lt;p&gt;We believe there are a number of reasons this has been unsuccessful and came to the realisation that 
the approach to sponsorship for micro needed to change.&lt;/p&gt;

&lt;h2 id=&quot;joining-patreon&quot;&gt;Joining Patreon&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.patreon.com&quot;&gt;Patreon&lt;/a&gt; is a platform for funding creators. There are a number of other similar platforms out there but 
seeing the successful funding of projects like &lt;a href=&quot;https://www.patreon.com/evanyou&quot;&gt;Vue.js&lt;/a&gt; on Patreon leads me to believe 
this is the best place for micro.&lt;/p&gt;

&lt;p&gt;So with that, Micro can now officially be sponsored via &lt;a href=&quot;https://www.patreon.com/microhq&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&quot;margin: 25px; text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.patreon.com/microhq&quot;&gt;
    &lt;img src=&quot;/blog/assets/images/patreon.png&quot; style=&quot;height: auto; width: 100%; margin: 0&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Patreon provides a simple, easy to use and visible place for sponsorship. Micro’s users span from individuals 
to multi-billion dollar enterprises. Patreon enables us to specify different levels of sponsorship so that anyone 
can support micro, from as little as $10/month as a backer or $5000/month as an enterprise sponsor.&lt;/p&gt;

&lt;p&gt;It’s early days but people have already started to show their support with over $500/month in commitment. I would like 
to personally thank them for their support. Join Sixt and the many others by sponsoring Micro on &lt;a href=&quot;https://www.patreon.com/microhq&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;I’m excited by all the possibilities enabled by opening up sponsorship to everyone via &lt;a href=&quot;https://www.patreon.com/microhq&quot;&gt;Patreon&lt;/a&gt; 
but also thinking more and more about the long term future of micro.&lt;/p&gt;

&lt;p&gt;Open source sustainability is a hot topic of discussion. It’s something I’m living and breathing on a daily basis. 
I believe sponsorship is a strong route forward but projects must also look beyond it to be truly sustainable.&lt;/p&gt;

&lt;p&gt;Micro today is an open source project funded by sponsorship. In the future we may look toward an open core model. 
Providing a turn-key enterprise solution.&lt;/p&gt;

&lt;p&gt;This would enable a self-sustaining future for micro while allowing it to fund it’s own open source development. 
Reach out to discuss or learn more.&lt;/p&gt;

&lt;center&gt;&lt;p&gt;...&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;If you want to learn more about micro, checkout the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt; or 
visit &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;Twitter&lt;/a&gt; or join the &lt;a href=&quot;http://slack.micro.mu&quot;&gt;Slack&lt;/a&gt; community.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Apr 2018 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2018/04/16/micro-on-patreon.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2018/04/16/micro-on-patreon.html</guid>
        
        
      </item>
    
      <item>
        <title>Functions with Micro</title>
        <description>&lt;p&gt;&lt;br /&gt;
As technology evolves so do our programming models. We’ve gone from monoliths to microservices 
and more recently started to push this separation even further towards functions.&lt;/p&gt;

&lt;p&gt;Micro looks to simplify distributed systems development, with &lt;a href=&quot;https://github.com/micro/go-micro&quot;&gt;go-micro&lt;/a&gt; 
providing a pluggable framework for microservices. Go-micro has historically included a high level &lt;a href=&quot;https://godoc.org/github.com/micro/go-micro#Service&quot;&gt;Service&lt;/a&gt; 
interface, encapsulating the lower level requirements for microservices.&lt;/p&gt;

&lt;p&gt;Today we’re introducing the &lt;a href=&quot;https://godoc.org/github.com/micro/go-micro#Function&quot;&gt;Function&lt;/a&gt; 
interface, a one time executing Service.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/bfbaf036c90761879dbf6e939e5172e4.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;the-inspiration&quot;&gt;The Inspiration&lt;/h3&gt;

&lt;p&gt;Ben Firshman open sourced a project last year called &lt;a href=&quot;https://github.com/bfirsh/funker&quot;&gt;Funker&lt;/a&gt;, functions as docker containers. The concept is very 
simple but also extremely clever.&lt;/p&gt;

&lt;p&gt;Functions could quite simply be programs with one method, listening on the network for a request and exiting after 
executing once, leveraging docker swarm services for lifecycle management, discovery, etc.&lt;/p&gt;

&lt;p&gt;This sparked the inspiration for including functions as part of go-micro.&lt;/p&gt;

&lt;h3 id=&quot;why-functions&quot;&gt;Why Functions?&lt;/h3&gt;

&lt;p&gt;The function programming model is the evolution of microservices. As our scale requirements increase both technically and organisationally 
there’s a need to decouple systems and teams so they can operate independently.&lt;/p&gt;

&lt;p&gt;In the past 5 years we’ve seen the emergence of microservices as a way of dealing with those scaling requirements. The microservices 
architecture pattern is of course nothing new but we’ve now started to define best practices which help us build better software.&lt;/p&gt;

&lt;p&gt;Functions push us into a new realm of possibility in terms of simplifying distributed systems development and solving software problems. 
Going back to the unix philosophy, “do one thing and do it well”, functions truly embody that philosophy even more so than microservices.&lt;/p&gt;

&lt;p&gt;While infrastructure helps us build scalable systems, remember that microservices and functions are software architecture patterns 
and programming models, so with that we need tools which help us to write software using those patterns.&lt;/p&gt;

&lt;h3 id=&quot;example-function&quot;&gt;Example Function&lt;/h3&gt;

&lt;p&gt;Here’s a straight forward example of writing a function with go-micro.&lt;/p&gt;

&lt;p&gt;As you can tell it looks almost identical to a service definition. That’s because underneath the covers they are exactly the 
same except for one small detail, functions exit after one execution of a handler or subscriber.&lt;/p&gt;

&lt;p&gt;Functions give you the same functionality as services, letting you leverage all the existing micro ecosystem tooling.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/asim/7d70cf1160ad1279597f12985fe3fbd5.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;running-functions&quot;&gt;Running Functions&lt;/h3&gt;

&lt;p&gt;As previously stated, functions in micro are one time executing services, the function will exit after completing a request. This then 
poses the question, how do we keep functions running?&lt;/p&gt;

&lt;p&gt;There is an abundance of existing tooling out there for process lifecycle management, so feel free to use any of your favourite 
process managers.&lt;/p&gt;

&lt;p&gt;However the micro toolkit now includes a convenience tool called &lt;a href=&quot;https://micro.mu/docs/run.html&quot;&gt;&lt;strong&gt;micro run&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how to run a function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;micro run -r github.com/micro/examples/function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;micro run&lt;/strong&gt; command fetches, builds and executes from source. The &lt;code&gt;-r&lt;/code&gt; flag tells it restart the function on exit. 
It’s currently a simple and experimental tool for running micro based microservices and functions. From source to running in one command.&lt;/p&gt;

&lt;p&gt;There will be a separate post for the run command once it’s more stable.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Functions are a natural extension of microservices as the next programming model to help simplify distributed systems development. 
Micro treats functions as a first class citizen.&lt;/p&gt;

&lt;p&gt;While functions have been added to go-micro, it does not mean 100% of your software needs to be written with them. It’s important 
to understand when monoliths, microservices or functions are appropriate.&lt;/p&gt;

&lt;p&gt;Look to see more on integrating micro functions with existing systems and serverless tooling in the near future.&lt;/p&gt;

&lt;center&gt;&lt;p&gt;...&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;If you want to learn more about the services we offer or microservices, checkout the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt; or 
visit &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;Twitter&lt;/a&gt; or join the &lt;a href=&quot;http://slack.micro.mu&quot;&gt;Slack&lt;/a&gt; community.&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Jun 2017 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2017/06/06/functions.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2017/06/06/functions.html</guid>
        
        
      </item>
    
      <item>
        <title>Announcing The Micro Explorer</title>
        <description>&lt;p&gt;&lt;br /&gt;
Today I’m excited to announce the &lt;a href=&quot;https://micro.mu/explore/&quot;&gt;Micro Explorer&lt;/a&gt;, a single place to find projects within the micro ecosystem.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;a href=&quot;https://micro.mu/explore/&quot;&gt;&lt;img src=&quot;/blog/assets/images/explorer.png&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-explorer&quot;&gt;What is the Explorer?&lt;/h3&gt;

&lt;p&gt;The Micro Explorer is primarily a search engine for micro related projects. GitHub has become the source of truth 
for the majority of developers and serves as a common place to share code, but it’s not always easy to find exactly 
what you’re looking for.&lt;/p&gt;

&lt;p&gt;The Explorer gives us a way to do just that for all things Micro. We’re using the GitHub API to find any public repository 
that makes use of the micro libraries and putting them in a single convenient place for the community to explore and use.&lt;/p&gt;

&lt;p&gt;Search is just the first feature of Explorer. Watch this space.&lt;/p&gt;

&lt;h3 id=&quot;why-do-we-need-an-explorer&quot;&gt;Why do we need an Explorer?&lt;/h3&gt;

&lt;p&gt;Time and time again questions appear in the community slack in regards to whether there are existing libraries, 
tools or services for specific micro related requirements.&lt;/p&gt;

&lt;p&gt;Why build something when someone else may have already shared it with the world? Micro looks to promote sharing 
and reuse of plugins and microservices.&lt;/p&gt;

&lt;p&gt;With that in mind, it became clear that even the simplest of aggregation tools to surface these repositories would 
be immensely useful.&lt;/p&gt;

&lt;p&gt;As the community grows we hope to see more contributed back and made easily accessible through the Micro Explorer.&lt;/p&gt;

&lt;center&gt;&lt;p&gt;...&lt;/p&gt;&lt;/center&gt;
&lt;p&gt;If you want to learn more about the services we offer or microservices, checkout the &lt;a href=&quot;https://micro.mu&quot;&gt;website&lt;/a&gt; or 
visit &lt;a href=&quot;https://github.com/micro/micro&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Follow us on &lt;a href=&quot;https://twitter.com/microhq&quot;&gt;Twitter&lt;/a&gt; or join the &lt;a href=&quot;http://slack.micro.mu&quot;&gt;Slack&lt;/a&gt; community.&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Mar 2017 10:00:00 +0100</pubDate>
        <link>https://micro.mu//blog/2017/03/27/micro-explorer.html</link>
        <guid isPermaLink="true">https://micro.mu//blog/2017/03/27/micro-explorer.html</guid>
        
        
      </item>
    
  </channel>
</rss>
